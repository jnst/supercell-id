// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: authentication/v1/authentication_service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/jnst/supercell-id/pkg/gen/authentication/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// AuthenticationServiceName is the fully-qualified name of the AuthenticationService service.
	AuthenticationServiceName = "authentication.v1.AuthenticationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthenticationServiceRegisterProcedure is the fully-qualified name of the AuthenticationService's
	// Register RPC.
	AuthenticationServiceRegisterProcedure = "/authentication.v1.AuthenticationService/Register"
	// AuthenticationServiceSigninProcedure is the fully-qualified name of the AuthenticationService's
	// Signin RPC.
	AuthenticationServiceSigninProcedure = "/authentication.v1.AuthenticationService/Signin"
)

// AuthenticationServiceClient is a client for the authentication.v1.AuthenticationService service.
type AuthenticationServiceClient interface {
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	Signin(context.Context, *connect.Request[v1.SigninRequest]) (*connect.Response[v1.SigninResponse], error)
}

// NewAuthenticationServiceClient constructs a client for the
// authentication.v1.AuthenticationService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthenticationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthenticationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authenticationServiceClient{
		register: connect.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+AuthenticationServiceRegisterProcedure,
			opts...,
		),
		signin: connect.NewClient[v1.SigninRequest, v1.SigninResponse](
			httpClient,
			baseURL+AuthenticationServiceSigninProcedure,
			opts...,
		),
	}
}

// authenticationServiceClient implements AuthenticationServiceClient.
type authenticationServiceClient struct {
	register *connect.Client[v1.RegisterRequest, v1.RegisterResponse]
	signin   *connect.Client[v1.SigninRequest, v1.SigninResponse]
}

// Register calls authentication.v1.AuthenticationService.Register.
func (c *authenticationServiceClient) Register(ctx context.Context, req *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// Signin calls authentication.v1.AuthenticationService.Signin.
func (c *authenticationServiceClient) Signin(ctx context.Context, req *connect.Request[v1.SigninRequest]) (*connect.Response[v1.SigninResponse], error) {
	return c.signin.CallUnary(ctx, req)
}

// AuthenticationServiceHandler is an implementation of the authentication.v1.AuthenticationService
// service.
type AuthenticationServiceHandler interface {
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	Signin(context.Context, *connect.Request[v1.SigninRequest]) (*connect.Response[v1.SigninResponse], error)
}

// NewAuthenticationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthenticationServiceHandler(svc AuthenticationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authenticationServiceRegisterHandler := connect.NewUnaryHandler(
		AuthenticationServiceRegisterProcedure,
		svc.Register,
		opts...,
	)
	authenticationServiceSigninHandler := connect.NewUnaryHandler(
		AuthenticationServiceSigninProcedure,
		svc.Signin,
		opts...,
	)
	return "/authentication.v1.AuthenticationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthenticationServiceRegisterProcedure:
			authenticationServiceRegisterHandler.ServeHTTP(w, r)
		case AuthenticationServiceSigninProcedure:
			authenticationServiceSigninHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthenticationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthenticationServiceHandler struct{}

func (UnimplementedAuthenticationServiceHandler) Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authentication.v1.AuthenticationService.Register is not implemented"))
}

func (UnimplementedAuthenticationServiceHandler) Signin(context.Context, *connect.Request[v1.SigninRequest]) (*connect.Response[v1.SigninResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authentication.v1.AuthenticationService.Signin is not implemented"))
}
